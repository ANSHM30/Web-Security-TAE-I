{"ast":null,"code":"// src/services/authService.js\nimport { jwtDecode } from \"jwt-decode\";\nimport { toast } from \"react-toastify\";\nconst API_URL = \"http://localhost:4000/api\";\n\n// ======== Local Storage Helpers ========\nfunction setAccessToken(token) {\n  localStorage.setItem(\"accessToken\", token);\n}\nfunction getAccessToken() {\n  return localStorage.getItem(\"accessToken\");\n}\nfunction clearAccessToken() {\n  localStorage.removeItem(\"accessToken\");\n}\n\n// ======== AUTH API CALLS ========\nexport async function login(email, password) {\n  const res = await fetch(`${API_URL}/auth/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    }),\n    credentials: \"include\" // send cookies for refresh token\n  });\n  if (!res.ok) throw new Error(\"Login failed\");\n  const data = await res.json();\n  setAccessToken(data.accessToken);\n  return data;\n}\nexport async function register(email, password) {\n  const res = await fetch(`${API_URL}/auth/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!res.ok) throw new Error(\"Registration failed\");\n  return res.json();\n}\nexport function logout() {\n  clearAccessToken();\n  toast.info(\"Logged out\");\n}\nexport function getUser() {\n  const token = getAccessToken();\n  if (!token) return null;\n  try {\n    return jwtDecode(token);\n  } catch (err) {\n    return null;\n  }\n}\n\n// ======== REFRESH TOKEN LOGIC ========\nasync function refreshAccessToken() {\n  const res = await fetch(`${API_URL}/auth/refresh`, {\n    method: \"POST\",\n    credentials: \"include\" // send cookies\n  });\n  if (!res.ok) {\n    logout();\n    toast.error(\"Session expired. Please log in again.\");\n    throw new Error(\"Refresh token expired\");\n  }\n  const data = await res.json();\n  setAccessToken(data.accessToken);\n  return data.accessToken;\n}\n\n// ======== FETCH WITH AUTO-REFRESH ========\nexport async function fetchWithAuth(url, options = {}) {\n  let token = getAccessToken();\n  if (!token) {\n    toast.error(\"You must log in first\");\n    throw new Error(\"No access token\");\n  }\n\n  // attach Authorization header\n  options.headers = {\n    ...options.headers,\n    Authorization: `Bearer ${token}`\n  };\n  let res = await fetch(url, options);\n\n  // If token expired, try refresh\n  if (res.status === 401) {\n    try {\n      token = await refreshAccessToken();\n\n      // retry request with new token\n      options.headers.Authorization = `Bearer ${token}`;\n      res = await fetch(url, options);\n    } catch (err) {\n      throw err; // handled above\n    }\n  }\n  return res;\n}\n\n// Export helpers if needed elsewhere\nexport { getAccessToken };","map":{"version":3,"names":["jwtDecode","toast","API_URL","setAccessToken","token","localStorage","setItem","getAccessToken","getItem","clearAccessToken","removeItem","login","email","password","res","fetch","method","headers","body","JSON","stringify","credentials","ok","Error","data","json","accessToken","register","logout","info","getUser","err","refreshAccessToken","error","fetchWithAuth","url","options","Authorization","status"],"sources":["D:/Ansh/OneDrive/Desktop/Web Security/jwt-auth-refresh-app/client/src/services/authService.js"],"sourcesContent":["// src/services/authService.js\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst API_URL = \"http://localhost:4000/api\";\r\n\r\n// ======== Local Storage Helpers ========\r\nfunction setAccessToken(token) {\r\n  localStorage.setItem(\"accessToken\", token);\r\n}\r\n\r\nfunction getAccessToken() {\r\n  return localStorage.getItem(\"accessToken\");\r\n}\r\n\r\nfunction clearAccessToken() {\r\n  localStorage.removeItem(\"accessToken\");\r\n}\r\n\r\n// ======== AUTH API CALLS ========\r\nexport async function login(email, password) {\r\n  const res = await fetch(`${API_URL}/auth/login`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ email, password }),\r\n    credentials: \"include\", // send cookies for refresh token\r\n  });\r\n\r\n  if (!res.ok) throw new Error(\"Login failed\");\r\n\r\n  const data = await res.json();\r\n  setAccessToken(data.accessToken);\r\n  return data;\r\n}\r\n\r\nexport async function register(email, password) {\r\n  const res = await fetch(`${API_URL}/auth/register`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ email, password }),\r\n  });\r\n\r\n  if (!res.ok) throw new Error(\"Registration failed\");\r\n  return res.json();\r\n}\r\n\r\nexport function logout() {\r\n  clearAccessToken();\r\n  toast.info(\"Logged out\");\r\n}\r\n\r\nexport function getUser() {\r\n  const token = getAccessToken();\r\n  if (!token) return null;\r\n  try {\r\n    return jwtDecode(token);\r\n  } catch (err) {\r\n    return null;\r\n  }\r\n}\r\n\r\n// ======== REFRESH TOKEN LOGIC ========\r\nasync function refreshAccessToken() {\r\n  const res = await fetch(`${API_URL}/auth/refresh`, {\r\n    method: \"POST\",\r\n    credentials: \"include\", // send cookies\r\n  });\r\n\r\n  if (!res.ok) {\r\n    logout();\r\n    toast.error(\"Session expired. Please log in again.\");\r\n    throw new Error(\"Refresh token expired\");\r\n  }\r\n\r\n  const data = await res.json();\r\n  setAccessToken(data.accessToken);\r\n  return data.accessToken;\r\n}\r\n\r\n// ======== FETCH WITH AUTO-REFRESH ========\r\nexport async function fetchWithAuth(url, options = {}) {\r\n  let token = getAccessToken();\r\n\r\n  if (!token) {\r\n    toast.error(\"You must log in first\");\r\n    throw new Error(\"No access token\");\r\n  }\r\n\r\n  // attach Authorization header\r\n  options.headers = {\r\n    ...options.headers,\r\n    Authorization: `Bearer ${token}`,\r\n  };\r\n\r\n  let res = await fetch(url, options);\r\n\r\n  // If token expired, try refresh\r\n  if (res.status === 401) {\r\n    try {\r\n      token = await refreshAccessToken();\r\n\r\n      // retry request with new token\r\n      options.headers.Authorization = `Bearer ${token}`;\r\n      res = await fetch(url, options);\r\n    } catch (err) {\r\n      throw err; // handled above\r\n    }\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\n// Export helpers if needed elsewhere\r\nexport { getAccessToken };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}