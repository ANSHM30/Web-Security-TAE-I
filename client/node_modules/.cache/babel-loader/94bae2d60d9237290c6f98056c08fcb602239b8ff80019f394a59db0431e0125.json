{"ast":null,"code":"// src/authService.js\nimport { jwtDecode } from \"jwt-decode\";\nconst API_URL = \"http://localhost:4000\"; // backend URL\n\n// --- Check if token expired ---\nfunction isTokenExpired(token) {\n  if (!token) return true;\n  try {\n    const {\n      exp\n    } = jwtDecode(token);\n    return Date.now() >= exp * 1000;\n  } catch (e) {\n    return true;\n  }\n}\n\n// --- Refresh Access Token ---\nasync function refreshAccessToken() {\n  try {\n    const res = await fetch(`${API_URL}/auth/refresh`, {\n      method: \"POST\",\n      credentials: \"include\" // send cookies (refreshToken)\n    });\n    if (!res.ok) throw new Error(\"Refresh failed\");\n    const data = await res.json();\n    localStorage.setItem(\"accessToken\", data.accessToken);\n    return data.accessToken;\n  } catch (err) {\n    console.error(\"‚ùå Refresh failed:\", err.message);\n    localStorage.removeItem(\"accessToken\");\n    window.location.href = \"/login\"; // redirect user\n    return null;\n  }\n}\n\n// --- Wrapper for all API calls ---\nexport async function fetchWithAuth(url, options = {}) {\n  let accessToken = localStorage.getItem(\"accessToken\");\n\n  // If expired ‚Üí refresh\n  if (isTokenExpired(accessToken)) {\n    console.log(\"üîÑ Access token expired, refreshing...\");\n    accessToken = await refreshAccessToken();\n    if (!accessToken) return; // refresh failed\n  }\n\n  // Call API with (new or existing) accessToken\n  return fetch(url, {\n    ...options,\n    headers: {\n      ...options.headers,\n      Authorization: `Bearer ${accessToken}`\n    }\n  });\n}","map":{"version":3,"names":["jwtDecode","API_URL","isTokenExpired","token","exp","Date","now","e","refreshAccessToken","res","fetch","method","credentials","ok","Error","data","json","localStorage","setItem","accessToken","err","console","error","message","removeItem","window","location","href","fetchWithAuth","url","options","getItem","log","headers","Authorization"],"sources":["D:/Ansh/OneDrive/Desktop/Web Security/jwt-auth-refresh-app/client/src/services/authService.js"],"sourcesContent":["// src/authService.js\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\nconst API_URL = \"http://localhost:4000\"; // backend URL\r\n\r\n// --- Check if token expired ---\r\nfunction isTokenExpired(token) {\r\n  if (!token) return true;\r\n  try {\r\n    const { exp } = jwtDecode(token);\r\n    return Date.now() >= exp * 1000;\r\n  } catch (e) {\r\n    return true;\r\n  }\r\n}\r\n\r\n// --- Refresh Access Token ---\r\nasync function refreshAccessToken() {\r\n  try {\r\n    const res = await fetch(`${API_URL}/auth/refresh`, {\r\n      method: \"POST\",\r\n      credentials: \"include\", // send cookies (refreshToken)\r\n    });\r\n\r\n    if (!res.ok) throw new Error(\"Refresh failed\");\r\n\r\n    const data = await res.json();\r\n    localStorage.setItem(\"accessToken\", data.accessToken);\r\n    return data.accessToken;\r\n  } catch (err) {\r\n    console.error(\"‚ùå Refresh failed:\", err.message);\r\n    localStorage.removeItem(\"accessToken\");\r\n    window.location.href = \"/login\"; // redirect user\r\n    return null;\r\n  }\r\n}\r\n\r\n// --- Wrapper for all API calls ---\r\nexport async function fetchWithAuth(url, options = {}) {\r\n  let accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n  // If expired ‚Üí refresh\r\n  if (isTokenExpired(accessToken)) {\r\n    console.log(\"üîÑ Access token expired, refreshing...\");\r\n    accessToken = await refreshAccessToken();\r\n    if (!accessToken) return; // refresh failed\r\n  }\r\n\r\n  // Call API with (new or existing) accessToken\r\n  return fetch(url, {\r\n    ...options,\r\n    headers: {\r\n      ...options.headers,\r\n      Authorization: `Bearer ${accessToken}`,\r\n    },\r\n  });\r\n}\r\n"],"mappings":"AAAA;AACA,SAASA,SAAS,QAAQ,YAAY;AAEtC,MAAMC,OAAO,GAAG,uBAAuB,CAAC,CAAC;;AAEzC;AACA,SAASC,cAAcA,CAACC,KAAK,EAAE;EAC7B,IAAI,CAACA,KAAK,EAAE,OAAO,IAAI;EACvB,IAAI;IACF,MAAM;MAAEC;IAAI,CAAC,GAAGJ,SAAS,CAACG,KAAK,CAAC;IAChC,OAAOE,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIF,GAAG,GAAG,IAAI;EACjC,CAAC,CAAC,OAAOG,CAAC,EAAE;IACV,OAAO,IAAI;EACb;AACF;;AAEA;AACA,eAAeC,kBAAkBA,CAAA,EAAG;EAClC,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGT,OAAO,eAAe,EAAE;MACjDU,MAAM,EAAE,MAAM;MACdC,WAAW,EAAE,SAAS,CAAE;IAC1B,CAAC,CAAC;IAEF,IAAI,CAACH,GAAG,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;IAE9C,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,CAAC;IAC7BC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEH,IAAI,CAACI,WAAW,CAAC;IACrD,OAAOJ,IAAI,CAACI,WAAW;EACzB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEF,GAAG,CAACG,OAAO,CAAC;IAC/CN,YAAY,CAACO,UAAU,CAAC,aAAa,CAAC;IACtCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;IACjC,OAAO,IAAI;EACb;AACF;;AAEA;AACA,OAAO,eAAeC,aAAaA,CAACC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACrD,IAAIX,WAAW,GAAGF,YAAY,CAACc,OAAO,CAAC,aAAa,CAAC;;EAErD;EACA,IAAI7B,cAAc,CAACiB,WAAW,CAAC,EAAE;IAC/BE,OAAO,CAACW,GAAG,CAAC,wCAAwC,CAAC;IACrDb,WAAW,GAAG,MAAMX,kBAAkB,CAAC,CAAC;IACxC,IAAI,CAACW,WAAW,EAAE,OAAO,CAAC;EAC5B;;EAEA;EACA,OAAOT,KAAK,CAACmB,GAAG,EAAE;IAChB,GAAGC,OAAO;IACVG,OAAO,EAAE;MACP,GAAGH,OAAO,CAACG,OAAO;MAClBC,aAAa,EAAE,UAAUf,WAAW;IACtC;EACF,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}