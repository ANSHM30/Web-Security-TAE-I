{"ast":null,"code":"var _s = $RefreshSig$();\n// src/services/authService.js\nimport { useEffect, useState } from \"react\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { toast } from \"react-toastify\";\nconst API_URL = \"http://localhost:4000/api\";\n\n// ======== Local Storage Helpers ========\nconst setAccessToken = token => localStorage.setItem(\"accessToken\", token);\nconst getAccessToken = () => localStorage.getItem(\"accessToken\");\nconst clearAccessToken = () => localStorage.removeItem(\"accessToken\");\n\n// ======== AUTH API CALLS ========\nconst login = async (email, password) => {\n  const res = await fetch(`${API_URL}/auth/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    }),\n    credentials: \"include\" // send cookies for refresh token\n  });\n  if (!res.ok) throw new Error(\"Login failed\");\n  const data = await res.json();\n  setAccessToken(data.accessToken);\n  return data;\n};\nconst register = async (email, password) => {\n  const res = await fetch(`${API_URL}/auth/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!res.ok) throw new Error(\"Registration failed\");\n  return res.json();\n};\nconst logout = () => {\n  clearAccessToken();\n  toast.info(\"Logged out\");\n};\nconst getUser = () => {\n  const token = getAccessToken();\n  if (!token) return null;\n  try {\n    return jwtDecode(token);\n  } catch {\n    return null;\n  }\n};\n\n// ======== REFRESH TOKEN LOGIC ========\nconst refreshAccessToken = async () => {\n  const res = await fetch(`${API_URL}/auth/refresh`, {\n    method: \"POST\",\n    credentials: \"include\"\n  });\n  if (!res.ok) {\n    logout();\n    toast.error(\"Session expired. Please log in again.\");\n    throw new Error(\"Refresh token expired\");\n  }\n  const data = await res.json();\n  setAccessToken(data.accessToken);\n  return data.accessToken;\n};\n\n// ======== FETCH WITH AUTO-REFRESH ========\nconst fetchWithAuth = async (url, options = {}) => {\n  let token = getAccessToken();\n  if (!token) {\n    toast.error(\"You must log in first\");\n    throw new Error(\"No access token\");\n  }\n  options.headers = {\n    ...options.headers,\n    Authorization: `Bearer ${token}`\n  };\n  let res = await fetch(url, options);\n  if (res.status === 401) {\n    try {\n      token = await refreshAccessToken();\n      options.headers.Authorization = `Bearer ${token}`;\n      res = await fetch(url, options);\n    } catch (err) {\n      throw err;\n    }\n  }\n  return res;\n};\n\n// ======== SESSION HOOK (for countdown & auto-refresh) ========\nexport function useSession() {\n  _s();\n  const [timeLeft, setTimeLeft] = useState(null);\n  useEffect(() => {\n    const token = getAccessToken();\n    if (!token) return;\n    let decoded;\n    try {\n      decoded = jwtDecode(token);\n    } catch {\n      logout();\n      window.location.reload(); // refresh immediately if token invalid\n      return;\n    }\n    const expiryTime = decoded.exp * 1000;\n    const interval = setInterval(async () => {\n      const now = Date.now();\n      const diff = expiryTime - now;\n      if (diff <= 0) {\n        clearInterval(interval);\n        logout();\n        window.location.reload(); // refresh page on expiry\n      } else if (diff < 60000) {\n        // Refresh token 1 minute before expiry\n        try {\n          await fetchWithAuth(`${API_URL}/auth/refresh`, {\n            method: \"POST\"\n          });\n          const newToken = getAccessToken();\n          const newDecoded = jwtDecode(newToken);\n          setTimeLeft(Math.floor((newDecoded.exp * 1000 - Date.now()) / 1000));\n        } catch {\n          logout();\n          window.location.reload(); // refresh page if refresh failed\n        }\n      } else {\n        setTimeLeft(Math.floor(diff / 1000));\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return timeLeft;\n}\n\n// ======== EXPORTS ========\n_s(useSession, \"FOc75etvWWxLQuOXBaop/MjMUe8=\");\nexport { login, register, logout, getUser, getAccessToken, fetchWithAuth, refreshAccessToken };","map":{"version":3,"names":["useEffect","useState","jwtDecode","toast","API_URL","setAccessToken","token","localStorage","setItem","getAccessToken","getItem","clearAccessToken","removeItem","login","email","password","res","fetch","method","headers","body","JSON","stringify","credentials","ok","Error","data","json","accessToken","register","logout","info","getUser","refreshAccessToken","error","fetchWithAuth","url","options","Authorization","status","err","useSession","_s","timeLeft","setTimeLeft","decoded","window","location","reload","expiryTime","exp","interval","setInterval","now","Date","diff","clearInterval","newToken","newDecoded","Math","floor"],"sources":["D:/Ansh/OneDrive/Desktop/Web Security/Web-Security-TAE-I/client/src/services/authService.js"],"sourcesContent":["// src/services/authService.js\r\nimport { useEffect, useState } from \"react\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst API_URL = \"http://localhost:4000/api\";\r\n\r\n// ======== Local Storage Helpers ========\r\nconst setAccessToken = (token) => localStorage.setItem(\"accessToken\", token);\r\nconst getAccessToken = () => localStorage.getItem(\"accessToken\");\r\nconst clearAccessToken = () => localStorage.removeItem(\"accessToken\");\r\n\r\n// ======== AUTH API CALLS ========\r\nconst login = async (email, password) => {\r\n  const res = await fetch(`${API_URL}/auth/login`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ email, password }),\r\n    credentials: \"include\", // send cookies for refresh token\r\n  });\r\n\r\n  if (!res.ok) throw new Error(\"Login failed\");\r\n  const data = await res.json();\r\n  setAccessToken(data.accessToken);\r\n  return data;\r\n};\r\n\r\nconst register = async (email, password) => {\r\n  const res = await fetch(`${API_URL}/auth/register`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ email, password }),\r\n  });\r\n  if (!res.ok) throw new Error(\"Registration failed\");\r\n  return res.json();\r\n};\r\n\r\nconst logout = () => {\r\n  clearAccessToken();\r\n  toast.info(\"Logged out\");\r\n};\r\n\r\nconst getUser = () => {\r\n  const token = getAccessToken();\r\n  if (!token) return null;\r\n  try {\r\n    return jwtDecode(token);\r\n  } catch {\r\n    return null;\r\n  }\r\n};\r\n\r\n// ======== REFRESH TOKEN LOGIC ========\r\nconst refreshAccessToken = async () => {\r\n  const res = await fetch(`${API_URL}/auth/refresh`, {\r\n    method: \"POST\",\r\n    credentials: \"include\",\r\n  });\r\n\r\n  if (!res.ok) {\r\n    logout();\r\n    toast.error(\"Session expired. Please log in again.\");\r\n    throw new Error(\"Refresh token expired\");\r\n  }\r\n\r\n  const data = await res.json();\r\n  setAccessToken(data.accessToken);\r\n  return data.accessToken;\r\n};\r\n\r\n// ======== FETCH WITH AUTO-REFRESH ========\r\nconst fetchWithAuth = async (url, options = {}) => {\r\n  let token = getAccessToken();\r\n  if (!token) {\r\n    toast.error(\"You must log in first\");\r\n    throw new Error(\"No access token\");\r\n  }\r\n\r\n  options.headers = {\r\n    ...options.headers,\r\n    Authorization: `Bearer ${token}`,\r\n  };\r\n\r\n  let res = await fetch(url, options);\r\n\r\n  if (res.status === 401) {\r\n    try {\r\n      token = await refreshAccessToken();\r\n      options.headers.Authorization = `Bearer ${token}`;\r\n      res = await fetch(url, options);\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  return res;\r\n};\r\n\r\n// ======== SESSION HOOK (for countdown & auto-refresh) ========\r\nexport function useSession() {\r\n  const [timeLeft, setTimeLeft] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const token = getAccessToken();\r\n    if (!token) return;\r\n\r\n    let decoded;\r\n    try {\r\n      decoded = jwtDecode(token);\r\n    } catch {\r\n      logout();\r\n      window.location.reload(); // refresh immediately if token invalid\r\n      return;\r\n    }\r\n\r\n    const expiryTime = decoded.exp * 1000;\r\n\r\n    const interval = setInterval(async () => {\r\n      const now = Date.now();\r\n      const diff = expiryTime - now;\r\n\r\n      if (diff <= 0) {\r\n        clearInterval(interval);\r\n        logout();\r\n        window.location.reload(); // refresh page on expiry\r\n      } else if (diff < 60000) {\r\n        // Refresh token 1 minute before expiry\r\n        try {\r\n          await fetchWithAuth(`${API_URL}/auth/refresh`, { method: \"POST\" });\r\n          const newToken = getAccessToken();\r\n          const newDecoded = jwtDecode(newToken);\r\n          setTimeLeft(Math.floor((newDecoded.exp * 1000 - Date.now()) / 1000));\r\n        } catch {\r\n          logout();\r\n          window.location.reload(); // refresh page if refresh failed\r\n        }\r\n      } else {\r\n        setTimeLeft(Math.floor(diff / 1000));\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return timeLeft;\r\n}\r\n\r\n\r\n// ======== EXPORTS ========\r\nexport {\r\n  login,\r\n  register,\r\n  logout,\r\n  getUser,\r\n  getAccessToken,\r\n  fetchWithAuth,\r\n  refreshAccessToken,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}