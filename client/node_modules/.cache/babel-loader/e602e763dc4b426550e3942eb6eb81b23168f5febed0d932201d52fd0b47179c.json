{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useSession.js\nimport { useEffect, useState } from \"react\";\nimport { getAccessToken, fetchWithAuth, logout } from \"../services/authService\";\nimport { jwtDecode } from \"jwt-decode\";\nexport default function useSession() {\n  _s();\n  const [timeLeft, setTimeLeft] = useState(null);\n  useEffect(() => {\n    const token = getAccessToken();\n    if (!token) return;\n    let decoded;\n    try {\n      decoded = jwtDecode(token);\n    } catch (err) {\n      logout();\n      return;\n    }\n    const expiryTime = decoded.exp * 1000; // Convert to ms\n\n    const interval = setInterval(async () => {\n      const now = Date.now();\n      const diff = expiryTime - now;\n      if (diff <= 0) {\n        clearInterval(interval);\n        alert(\"Session expired! Please login again.\");\n        logout();\n        window.location.href = \"/login\";\n      } else if (diff < 60000) {\n        // If less than 1 minute left, try refresh\n        try {\n          await fetchWithAuth(`${process.env.REACT_APP_API_URL}/auth/refresh`, {\n            method: \"POST\"\n          });\n          const newToken = getAccessToken();\n          const newDecoded = jwtDecode(newToken);\n          setTimeLeft(Math.floor((newDecoded.exp * 1000 - Date.now()) / 1000));\n        } catch (err) {\n          alert(\"Session expired! Please login again.\");\n          logout();\n          window.location.href = \"/login\";\n        }\n      } else {\n        setTimeLeft(Math.floor(diff / 1000));\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return timeLeft;\n}\n_s(useSession, \"FOc75etvWWxLQuOXBaop/MjMUe8=\");","map":{"version":3,"names":["useEffect","useState","getAccessToken","fetchWithAuth","logout","jwtDecode","useSession","_s","timeLeft","setTimeLeft","token","decoded","err","expiryTime","exp","interval","setInterval","now","Date","diff","clearInterval","alert","window","location","href","process","env","REACT_APP_API_URL","method","newToken","newDecoded","Math","floor"],"sources":["D:/Ansh/OneDrive/Desktop/Web Security/jwt-auth-refresh-app/client/src/services/authService.js"],"sourcesContent":["// src/hooks/useSession.js\r\nimport { useEffect, useState } from \"react\";\r\nimport { getAccessToken, fetchWithAuth, logout } from \"../services/authService\";\r\nimport {jwtDecode} from \"jwt-decode\";\r\n\r\nexport default function useSession() {\r\n  const [timeLeft, setTimeLeft] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const token = getAccessToken();\r\n    if (!token) return;\r\n\r\n    let decoded;\r\n    try {\r\n      decoded = jwtDecode(token);\r\n    } catch (err) {\r\n      logout();\r\n      return;\r\n    }\r\n\r\n    const expiryTime = decoded.exp * 1000; // Convert to ms\r\n\r\n    const interval = setInterval(async () => {\r\n      const now = Date.now();\r\n      const diff = expiryTime - now;\r\n\r\n      if (diff <= 0) {\r\n        clearInterval(interval);\r\n        alert(\"Session expired! Please login again.\");\r\n        logout();\r\n        window.location.href = \"/login\";\r\n      } else if (diff < 60000) {\r\n        // If less than 1 minute left, try refresh\r\n        try {\r\n          await fetchWithAuth(`${process.env.REACT_APP_API_URL}/auth/refresh`, {\r\n            method: \"POST\",\r\n          });\r\n          const newToken = getAccessToken();\r\n          const newDecoded = jwtDecode(newToken);\r\n          setTimeLeft(Math.floor((newDecoded.exp * 1000 - Date.now()) / 1000));\r\n        } catch (err) {\r\n          alert(\"Session expired! Please login again.\");\r\n          logout();\r\n          window.location.href = \"/login\";\r\n        }\r\n      } else {\r\n        setTimeLeft(Math.floor(diff / 1000));\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return timeLeft;\r\n}\r\n"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,cAAc,EAAEC,aAAa,EAAEC,MAAM,QAAQ,yBAAyB;AAC/E,SAAQC,SAAS,QAAO,YAAY;AAEpC,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMU,KAAK,GAAGR,cAAc,CAAC,CAAC;IAC9B,IAAI,CAACQ,KAAK,EAAE;IAEZ,IAAIC,OAAO;IACX,IAAI;MACFA,OAAO,GAAGN,SAAS,CAACK,KAAK,CAAC;IAC5B,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZR,MAAM,CAAC,CAAC;MACR;IACF;IAEA,MAAMS,UAAU,GAAGF,OAAO,CAACG,GAAG,GAAG,IAAI,CAAC,CAAC;;IAEvC,MAAMC,QAAQ,GAAGC,WAAW,CAAC,YAAY;MACvC,MAAMC,GAAG,GAAGC,IAAI,CAACD,GAAG,CAAC,CAAC;MACtB,MAAME,IAAI,GAAGN,UAAU,GAAGI,GAAG;MAE7B,IAAIE,IAAI,IAAI,CAAC,EAAE;QACbC,aAAa,CAACL,QAAQ,CAAC;QACvBM,KAAK,CAAC,sCAAsC,CAAC;QAC7CjB,MAAM,CAAC,CAAC;QACRkB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MACjC,CAAC,MAAM,IAAIL,IAAI,GAAG,KAAK,EAAE;QACvB;QACA,IAAI;UACF,MAAMhB,aAAa,CAAC,GAAGsB,OAAO,CAACC,GAAG,CAACC,iBAAiB,eAAe,EAAE;YACnEC,MAAM,EAAE;UACV,CAAC,CAAC;UACF,MAAMC,QAAQ,GAAG3B,cAAc,CAAC,CAAC;UACjC,MAAM4B,UAAU,GAAGzB,SAAS,CAACwB,QAAQ,CAAC;UACtCpB,WAAW,CAACsB,IAAI,CAACC,KAAK,CAAC,CAACF,UAAU,CAAChB,GAAG,GAAG,IAAI,GAAGI,IAAI,CAACD,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;QACtE,CAAC,CAAC,OAAOL,GAAG,EAAE;UACZS,KAAK,CAAC,sCAAsC,CAAC;UAC7CjB,MAAM,CAAC,CAAC;UACRkB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;QACjC;MACF,CAAC,MAAM;QACLf,WAAW,CAACsB,IAAI,CAACC,KAAK,CAACb,IAAI,GAAG,IAAI,CAAC,CAAC;MACtC;IACF,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMC,aAAa,CAACL,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOP,QAAQ;AACjB;AAACD,EAAA,CAjDuBD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}